-- This file was automatically generated by alyxlib.

-- alyxlib can only run on server
if IsServer() then
    -- Load alyxlib before using it, in case this mod loads before the alyxlib mod.
    require("alyxlib.init")

    require("alyx_optometry.classes.glasses")

    -- execute code or load mod libraries here

    -- maps to GetVRControllerType()
    local CONTROLLER_TYPE_MODELS = {
        [VR_CONTROLLER_TYPE_UNKNOWN] = "models/wearable_glasses/wearable_glasses_rift_s.vmdl",
        [VR_CONTROLLER_TYPE_X360] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_VIVE] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_TOUCH] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_RIFT_S] = "models/wearable_glasses/wearable_glasses_rift_s.vmdl",
        [VR_CONTROLLER_TYPE_KNUCKLES] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_WINDOWSMR] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_WINDOWSMR_SAMSUNG] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_GENERIC_TRACKED] = "models/wearable_glasses/wearable_glasses.vmdl",
        [VR_CONTROLLER_TYPE_COSMOS] = "models/wearable_glasses/wearable_glasses.vmdl",
    }

    local GLASSES_NAME = "alyx_wears_glasses_prop"

    ---The global handle for the glasses prop spawned on map start.
    ---@type GlassesProp?
    AlyxGlasses = nil

    EasyConvars:RegisterCommand("glasses_drop", function ()
        if not AlyxGlasses then
            warn("Glasses prop could not be found!")
            return
        end

        AlyxGlasses.glassesWereDroppedUnintentionally = true
        AlyxGlasses:DropGlasses()
    end, "Drops the glasses")

    EasyConvars:RegisterCommand("glasses_wear", function ()
        if not AlyxGlasses then
            warn("Glasses prop could not be found!")
            return
        end

        AlyxGlasses:WearGlasses()
    end, "Puts the glasses on", 0)

    ListenToPlayerEvent("player_activate", function (params)
        Player:Delay(function()
            -- Search range should include nearby if player lost glasses when transitioning
            -- so we don't spawn another pair on player face.
            local glasses_count = #Entities:FindAllByName(GLASSES_NAME)
            if glasses_count > 0 then
                devprint("Glasses do exist in map...")
            end

            devprint("Looking for existing glasses near player...")
            local glasses = Entities:FindByNameNearest(GLASSES_NAME, Player:GetOrigin(), 400)
            if not glasses then
                devprint("No glasses nearby, spawning new glasses...")
                local model = CONTROLLER_TYPE_MODELS[Player:GetVRControllerType()]
                SpawnEntityFromTableAsynchronous("prop_physics",{
                    --targetname = "2578210103_alyx_glasses",
                    --origin = Vector(0,5,5),
                    targetname = GLASSES_NAME,--DoUniqueString("alyx_glasses"),
                    vscripts = "alyx_optometry/classes/glasses",
                    model = model,
                    -- glow can be used to help player find glasses
                    glowstate = "3",
                    glowrange = "256",
                    glowrangemin = "64",
                    --glowcolor = "19 121 255 255",
                    glowcolor = "255 18 18 255",
                    rendercolor = "255 18 18 255",
                    spawnflags = "16777473",
                },
                function(newGlasses)
                    ---@cast newGlasses GlassesProp
                    devprint("New glasses name: "..newGlasses:GetName())
                    newGlasses:WearGlasses(true)
                    AlyxGlasses = newGlasses
                end,
                nil)
            else
                devprint("Glasses already exist nearby...")
                AlyxGlasses = glasses
            end
        end)

    end)

end
